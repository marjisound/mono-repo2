/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Content from "./Content";

export interface IResponse {
    status?: string;
    userTier?: string;
    total?: number;
    content?: Content.IContent;
}

export interface IResponseArgs {
    status?: string;
    userTier?: string;
    total?: number;
    content?: Content.IContentArgs;
}

export const ResponseCodec: thrift.IStructCodec<IResponseArgs, IResponse> = {
    encode(args: IResponseArgs, output: thrift.TProtocol): void {
        const obj: any = {
            status: args.status,
            userTier: args.userTier,
            total: args.total,
            content: args.content
        };
        output.writeStructBegin("Response");
        if (obj.status != null) {
            output.writeFieldBegin("status", thrift.TType.STRING, 1);
            output.writeString(obj.status);
            output.writeFieldEnd();
        }
        if (obj.userTier != null) {
            output.writeFieldBegin("userTier", thrift.TType.STRING, 2);
            output.writeString(obj.userTier);
            output.writeFieldEnd();
        }
        if (obj.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 3);
            output.writeI32(obj.total);
            output.writeFieldEnd();
        }
        if (obj.content != null) {
            output.writeFieldBegin("content", thrift.TType.STRUCT, 4);
            Content.ContentCodec.encode(obj.content, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IResponse {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.status = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.userTier = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: number = input.readI32();
                        _args.total = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: Content.IContent = Content.ContentCodec.decode(input);
                        _args.content = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.userTier !== undefined && _args.total !== undefined && _args.content !== undefined) {
            return {
                status: _args.status,
                userTier: _args.userTier,
                total: _args.total,
                content: _args.content,
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Response from input");
        }
    }
};
export class Response extends thrift.StructLike implements IResponse {
    public status?: string;
    public userTier?: string;
    public total?: number;
    public content?: Content.IContent;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IResponseArgs) {
        super();
        if (args.status != null) {
            const value_31: string = args.status;
            this.status = value_31;
        }
        if (args.userTier != null) {
            const value_32: string = args.userTier;
            this.userTier = value_32;
        }
        if (args.total != null) {
            const value_33: number = args.total;
            this.total = value_33;
        }
        if (args.content != null) {
            const value_35: Content.IContent = new Content.Content(args.content);
            this.content = value_35;
        }
    }
    public static read(input: thrift.TProtocol): Response {
        return new Response(ResponseCodec.decode(input));
    }
    public static write(args: IResponseArgs, output: thrift.TProtocol): void {
        return ResponseCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ResponseCodec.encode(this, output);
    }
}
